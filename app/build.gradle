apply plugin: 'com.android.application'

android {
    namespace "com.termux.window"
    compileSdkVersion project.properties.compileSdkVersion.toInteger()
    def appVersionName = System.getenv("TERMUX_FLOAT_APP_VERSION_NAME") ?: ""
    def apkVersionTag = System.getenv("TERMUX_FLOAT_APK_VERSION_TAG") ?: ""

    defaultConfig {
        applicationId "com.termux.window"
        minSdkVersion project.properties.minSdkVersion.toInteger()
        targetSdkVersion project.properties.targetSdkVersion.toInteger()
        versionCode 15
        versionName "0.15.0"

        if (appVersionName) versionName = appVersionName
        validateVersionName(versionName)

        manifestPlaceholders.TERMUX_PACKAGE_NAME = "com.termux"
        manifestPlaceholders.TERMUX_APP_NAME = "Termux"
        manifestPlaceholders.TERMUX_FLOAT_APP_NAME = "Termux:Float"
    }

    signingConfigs {
        debug {
            storeFile file('testkey_untrusted.jks')
            keyAlias 'alias'
            storePassword 'xrj45yWGLbsO7W0v'
            keyPassword 'xrj45yWGLbsO7W0v'
        }
    }

    buildTypes {
        release {
            minifyEnabled true
            shrinkResources false // Reproducible builds
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }

        debug {
            signingConfig signingConfigs.debug
            zipAlignEnabled true
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_11
        targetCompatibility JavaVersion.VERSION_11
    }

    applicationVariants.all { variant ->
        variant.outputs.all { output ->
            if (variant.buildType.name == "debug") {
                outputFileName = new File("termux-float_" + (apkVersionTag ? apkVersionTag : "debug") + ".apk")
            } else if (variant.buildType.name == "release") {
                outputFileName = new File("termux-float_" + (apkVersionTag ? apkVersionTag : "release") + ".apk")
            }
        }
    }
}

dependencies {
    implementation 'androidx.annotation:annotation:1.8.0'

    implementation 'com.termux.termux-app:terminal-view:0.119.0-beta.1'
    implementation 'com.termux.termux-app:termux-shared:0.119.0-beta.1'

    // Use if below libraries are published locally by termux-app with `./gradlew publishReleasePublicationToMavenLocal` and used with `mavenLocal()`.
    // If updates are done, republish there and sync project with gradle files here
    // https://github.com/termux/termux-app/wiki/Termux-Libraries
    //implementation 'com.termux.termux-app:termux-shared:v0.118.0'
    //implementation 'com.termux.termux-app:terminal-view:v0.118.0'

    testImplementation 'junit:junit:4.13.2'
}

task versionName {
    doLast {
        print android.defaultConfig.versionName
    }
}

def validateVersionName(String versionName) {
    // https://semver.org/spec/v2.0.0.html#is-there-a-suggested-regular-expression-regex-to-check-a-semver-string
    // ^(0|[1-9]\d*)\.(0|[1-9]\d*)\.(0|[1-9]\d*)(?:-((?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\.(?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\+([0-9a-zA-Z-]+(?:\.[0-9a-zA-Z-]+)*))?$
    if (!java.util.regex.Pattern.matches("^(0|[1-9]\\d*)\\.(0|[1-9]\\d*)\\.(0|[1-9]\\d*)(?:-((?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\\+([0-9a-zA-Z-]+(?:\\.[0-9a-zA-Z-]+)*))?\$", versionName))
        throw new GradleException("The versionName '" + versionName + "' is not a valid version as per semantic version '2.0.0' spec in the format 'major.minor.patch(-prerelease)(+buildmetadata)'. https://semver.org/spec/v2.0.0.html.")
}
